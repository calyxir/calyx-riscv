import "primitives/core.futil";
import "primitives/memories/comb.futil";
import "primitives/binary_operators.futil";

component register_file(@go go: 1, reg_idx: 5, write_val: 32, write_en: 1) -> (@done done: 1, reg_val: 32) {
  cells {
    read_delay = std_reg(1);
    regs = comb_mem_d1(32, 32, 5);
  }

  wires {
    group update_rf {
      regs.addr0 = reg_idx;

      // "return" the value that we read
      reg_val = reg_idx == 5'b0 ? 32'b0;
      reg_val = reg_idx != 5'b0 ? regs.read_data;

      // add a cycle delay for reading data
      read_delay.in = 1'b1;
      read_delay.write_en = 1'b1;

      // write any data that we might have received
      regs.write_data = write_val;
      regs.write_en = write_en;

      // done when either we have written regs or read_delay has finished
      update_rf[done] = regs.done | read_delay.done ? 1'b1;
    }
  }

  control {
    update_rf;
  }
}

comb component alu(left: 32, right: 32, funct3: 3, funct7: 7) -> (out: 32) {
  cells {
    add_op = std_add(32);
    sub_op = std_sub(32);
    xor_op = std_xor(32);
    or_op = std_or(32);
    and_op = std_and(32);

    imm_0_4_raw = std_bit_slice(32, 0, 5, 5);
    imm_0_4 = std_pad(5, 32);
    sll = std_lsh(32);
  }

  wires {
    add_op.left = left;
    add_op.right = right;

    sub_op.left = left;
    sub_op.right = right;

    xor_op.left = left;
    xor_op.right = right;

    or_op.left = left;
    or_op.right = right;

    and_op.left = left;
    and_op.right = right;

    imm_0_4_raw.in = right;
    imm_0_4.in = imm_0_4_raw.out;
    sll.left = left;
    sll.right = imm_0_4.out;

    // TODO: not supporting sub with the following expression
    out = funct3 == 3'x0 ? add_op.out;

    // not sure yet how to unify R-type and I-type instructions
    // maybe that doesn't belong here
    out = funct3 == 3'x0 & funct7 == 7'x20 ? sub_op.out;
    out = funct3 == 3'x4 & funct7 == 7'x00 ? xor_op.out;
    out = funct3 == 3'x6 & funct7 == 7'x00 ? or_op.out;
    out = funct3 == 3'x7 & funct7 == 7'x00 ? add_op.out;

    // TODO deal with funct7 nonsense
    out = funct3 == 3'x1 ? sll.out;
  }
}

comb component comp_alu(left: 32, right: 32, funct3: 3) -> (out: 1) {
  cells {
    beq = std_eq(32);
    blt = std_lt(32);
    neg = std_not(1);

    // the bottom wire of funct3 tells us if we should negate the output
    op = std_bit_slice(3, 1, 2, 2);
    should_negate = std_bit_slice(3, 0, 1, 1);
    tmp_out = std_wire(1);
  }

  wires {
    // hookup main compute cells
    beq.left = left;
    beq.right = right;

    blt.left = left;
    blt.right = right;

    // pull out the low bit of funct3
    op.in = funct3;
    should_negate.in = funct3;

    // choose which function to run
    tmp_out.in = op.out == 2'b00 ? beq.out;
    tmp_out.in = op.out == 2'b10 ? blt.out;
    tmp_out.in = op.out != 2'b00 & op.out != 2'b10 ? 1'b0;

    // hook up negation
    neg.in = tmp_out.out;

    // negate output if low bit of funct3 is high
    out = should_negate.out ? neg.out;
    out = !should_negate.out ? tmp_out.out;
  }
}

/// Construct a b-type immediate from the different parts of the instruction
/// the immediate is stored in bits imm0: 7..12 & imm1: 25..32
/// They are combined like so (Msb):
///   imm1[7] | imm0[0] | imm1[0..7] | imm0[1..5] | 0
comb component btype_immediate(imm0: 5, imm1: 7) -> (out: 32) {
  cells {
    // grab different parts of imm0 and imm1
    imm0_1_5 = std_bit_slice(5, 1, 4, 4);
    imm1_0_7 = std_bit_slice(7, 0, 6, 6);
    imm0_0 = std_bit_slice(5, 0, 1, 1);
    imm1_7 = std_bit_slice(7, 6, 6, 1);

    // imm0[1..5] | 0
    cat0 = std_cat(4, 1, 5);

    // imm1[0..7] | prev
    cat1 = std_cat(6, 5, 11);

    // imm0[0] | cat1
    cat2 = std_cat(1, 11, 12);

    // imm1[7] | cat2
    cat3 = std_cat(1, 12, 13);

    sign_extend = std_pad(13, 32);

    right_shift = std_rsh(32);
  }

  wires {
    // hook up bit slicers
    imm0_1_5.in = imm0;
    imm1_0_7.in = imm1;
    imm0_0.in = imm0;
    imm1_7.in = imm1;

    // hook up cat cells
    cat0.left = imm0_1_5.out;
    cat0.right = 1'd0;

    cat1.left = imm1_0_7.out;
    cat1.right = cat0.out;

    cat2.left = imm0_0.out;
    cat2.right = cat1.out;

    cat3.right = cat2.out;
    cat3.left = imm1_7.out;

    // output
    sign_extend.in = cat3.out;

    // divide the result by 4 (val >> 2)
    right_shift.left = sign_extend.out;
    right_shift.right = 32'd2;

    out = right_shift.out;
  }
}

/// Construct a j-type immediate. It's also stored in a funky
/// format for some reason that I haven't quite figured out.
///   imm[20|10:1|11|19:12]
///   imm[19] | imm[18:9] | imm[8] | imm[7:0]
comb component jtype_immediate(imm: 20) -> (out: 32) {
  cells {
    // bits 12-19 in result
    s0_7 = std_bit_slice(20, 0, 8, 8);
    // bit 11 in result
    s8 = std_bit_slice(20, 8, 9, 1);
    // bits 1-10 in result
    s9_18 = std_bit_slice(20, 9, 19, 10);
    // bit 20 in result
    s19 = std_bit_slice(20, 19, 19, 1);

    // s9_18 | 0
    cat0 = std_cat(10, 1, 11);
    // s8 | cat0
    cat1 = std_cat(1, 11, 12);
    // s0_7 | cat1
    cat2 = std_cat(8, 12, 20);
    // s19 | cat2
    cat3 = std_cat(1, 20, 21);

    // extend imm to 32 bits
    sign_extend = std_signext(21, 32);

    // divide by 4 (val >> 2)
    right_shift = std_srsh(32);
  }

  wires {
    // hook up slicers
    s0_7.in = imm;
    s8.in = imm;
    s9_18.in = imm;
    s19.in = imm;

    cat0.left = s9_18.out;
    cat0.right = 1'd0;

    cat1.left = s8.out;
    cat1.right = cat0.out;

    cat2.left = s0_7.out;
    cat2.right = cat1.out;

    cat3.left = s19.out;
    cat3.right = cat2.out;

    sign_extend.in = cat3.out;
    right_shift.left = sign_extend.out;
    right_shift.right = 32'd2;

    out = right_shift.out;
  }
}

comb component decode(inst: 32) -> (opcode: 7, rd: 5, funct3: 3, rs1: 5, rs2: 5, funct7: 7, imm: 20) {
  cells {
    opcode_slice = std_bit_slice(32, 0, 6, 7);
    rd_slice = std_bit_slice(32, 7, 12, 5);
    funct3_slice = std_bit_slice(32, 12, 15, 3);
    rs1_slice = std_bit_slice(32, 15, 19, 5);
    rs2_slice = std_bit_slice(32, 20, 24, 5);
    funct7_slice = std_bit_slice(32, 25, 31, 7);
    imm_slice = std_bit_slice(32, 12, 31, 20);

  }

  wires {
    opcode_slice.in = inst;
    rd_slice.in = inst;
    funct3_slice.in = inst;
    rs1_slice.in = inst;
    rs2_slice.in = inst;
    funct7_slice.in = inst;
    imm_slice.in = inst;

    opcode = opcode_slice.out;
    rd = rd_slice.out;
    funct3 = funct3_slice.out;
    rs1 = rs1_slice.out;
    rs2 = rs2_slice.out;
    funct7 = funct7_slice.out;
    imm = imm_slice.out;
  }
}

component main(@go go: 1) -> (@done done: 1) {
  // takes in an external memory bank with instructions to run
  cells {
    @external insts = comb_mem_d1(32, 13, 32);
    @external ram = comb_mem_d1(32, 16, 32);
    @external reg_file = comb_mem_d1(32, 32, 5);
    @external dbg = comb_mem_d1(32, 1, 1);

    pc = std_reg(32);
    pc_jump = std_reg(32);
    pc_good = std_wire(1);

    // debug reg to keep track of instructions executed
    inst_count = std_reg(32);
    inst_count_incr = std_add(32);
    // when to stop execution
    inst_limit = std_const(32, 100);

    decoder = decode();
    rf = register_file();
    alu = alu();
    comp_alu = comp_alu();

    curr_inst = std_reg(32);
    curr_rs1 = std_reg(32);
    curr_rs2 = std_reg(32);
    curr_imm_cat = std_cat(7, 5, 12);
    curr_imm = std_signext(12, 32);
    btype_immediate = btype_immediate();
    jtype_immediate = jtype_immediate();
    j_retval_incr = std_add(32);
    load_addr = std_add(32);
    load_addr_aligned = std_rsh(32);

    pc_incr = std_add(32);
    opcode_slice = std_bit_slice(32, 0, 6, 6);

    r_type = std_wire(1);
    i_type = std_wire(1);
    load_type = std_wire(1);
    s_type = std_wire(1);
    b_type = std_wire(1);
    u_type = std_wire(1);
    j_type = std_wire(1);

    // debug stuff to dump rf
    worf_idx = std_reg(5);
    worf_add = std_add(5);
    worf_done = std_reg(1);
    worf_not_done = std_not(1);
    worf_tmp = std_reg(32);
  }

  wires {
    // run until either inst_limit or we hit a ret instruction
    pc_good.in = inst_count.out < inst_limit.out & curr_inst.out != 32'x8067 ? 1'b1;
    pc_good.in = inst_count.out >= inst_limit.out | curr_inst.out == 32'x8067 ? 1'b0;

    // we're just always decoding the current instruction
    decoder.inst = curr_inst.out;
    curr_imm_cat.left = decoder.funct7;
    curr_imm_cat.right = decoder.rs2;
    curr_imm.in = curr_imm_cat.out;

    // compute btype_immediate
    btype_immediate.imm0 = decoder.rd;
    btype_immediate.imm1 = decoder.funct7;

    // compute jtype immediate
    jtype_immediate.imm = decoder.imm;

    // debug
    worf_not_done.in = worf_done.out;

    group read_instr {
      // read the instr at the pc
      insts.addr0 = pc.out;
      ram.addr0 = pc.out;

      // write it into a register
      curr_inst.in = insts.read_data;
      curr_inst.write_en = 1'b1;

      read_instr[done] = curr_inst.done;
    }

    // group dbg_here {
    //   dbg.addr0 = 1'b0;
    //   dbg.write_data = 32'b1;
    //   dbg.write_en = 1'b1;
    //   dbg_here[done] = dbg.done;
    // }

    // assumes that rs1 is meaningful in curr_inst
    group read_rs1 {
      rf.reg_idx = decoder.rs1;
      rf.go = 1'b1;
      curr_rs1.in = rf.reg_val;
      curr_rs1.write_en = rf.done;
      read_rs1[done] = curr_rs1.done;
    }

    // assumes that rs2 is meaningful in curr_inst
    group read_rs2 {
      rf.reg_idx = decoder.rs2;
      rf.go = 1'b1;
      curr_rs2.in = rf.reg_val;
      curr_rs2.write_en = rf.done;
      read_rs2[done] = curr_rs2.done;
    }

    comb group is_r_type {
      // arith instructions
      r_type.in = 1'b1;
      // r_type.in = decoder.opcode == 7'b0110011 ? 1'b1;
      // r_type.in = decoder.opcode != 7'b0110011 ? 1'b0;
    }

    // TODO: rename this (I really only want it to do arithmetic immediate instructions)
    comb group is_i_type {
      // arith instructions with immediates
      i_type.in = decoder.opcode == 7'b0010011 ? 1'b1;
      // jump and link reg instruction
      i_type.in = decoder.opcode == 7'b1100111 ? 1'b1;
      // environment instructions
      i_type.in = decoder.opcode == 7'b1110011 ? 1'b1;

      i_type.in = decoder.opcode != 7'b0010011 ? 1'b0;
      i_type.in = decoder.opcode != 7'b1100111 ? 1'b0;
      i_type.in = decoder.opcode != 7'b1110011 ? 1'b0;
    }

    comb group is_load {
      // load instructions
      load_type.in = decoder.opcode == 7'b0000011 ? 1'b1;
      load_type.in = decoder.opcode != 7'b0000011 ? 1'b0;
    }

    // comb group is_s_type {
    //   // store instructions
    //   s_type.in = decoder.opcode == 7'b0100011 ? 1'b1;
    //   s_type.in = decoder.opcode != 7'b0100011 ? 1'b1;
    // }

    comb group is_b_type {
      // branch instructions
      b_type.in = decoder.opcode == 7'b1100011 ? 1'b1;
      b_type.in = decoder.opcode != 7'b1100011 ? 1'b0;
    }

    // comb group is_u_type {
    //   u_type.in = decoder.opcode == 7'b0110111 ? 1'b1;
    //   u_type.in = decoder.opcode != 7'b0110111 ? 1'b0;
    // }

    comb group is_j_type {
      j_type.in = decoder.opcode == 7'b1101111 ? 1'b1;
      j_type.in = decoder.opcode != 7'b1101111 ? 1'b0;
    }

    group compute_r_type {
      alu.left = curr_rs1.out;
      alu.right = curr_rs2.out;

      // set the alu operation
      alu.funct3 = decoder.funct3;
      alu.funct7 = decoder.funct7;

      // write the result to the register file
      rf.go = 1'b1;
      rf.reg_idx = decoder.rd;
      rf.write_val = alu.out;
      rf.write_en = 1'b1;

      // set pc incr amount
      pc_jump.in = 32'b1;
      pc_jump.write_en = 1'b1;

      compute_r_type[done] = rf.done;
    }

    group compute_i_type {
      alu.left = curr_rs1.out;
      alu.right = curr_imm.out;

      // set the alu operation
      alu.funct3 = decoder.funct3;
      alu.funct7 = decoder.funct7;

      // write the result to the register file
      rf.go = 1'b1;
      rf.reg_idx = decoder.rd;
      rf.write_val = alu.out;
      rf.write_en = 1'b1;

      // set pc incr amount
      pc_jump.in = 32'b1;
      pc_jump.write_en = 1'b1;

      compute_i_type[done] = rf.done;
    }

    group compute_b_type {
      // wire up the comparison alu
      comp_alu.left = curr_rs1.out;
      comp_alu.right = curr_rs2.out;
      comp_alu.funct3 =  decoder.funct3;

      // if condition is true, increment pc by b_imm
      pc_jump.in = comp_alu.out ? btype_immediate.out;
      // else, fall through the branch
      pc_jump.in = !comp_alu.out ? 32'b1;
      pc_jump.write_en = 1'b1;

      compute_b_type[done] = pc_jump.done;
    }

    // TODO: only support load word at the moment
    group compute_load {
      // compute address to read from
      load_addr.left = curr_rs1.out;
      load_addr.right = curr_imm.out;
      load_addr_aligned.left = load_addr.out;
      load_addr_aligned.right = 32'd3;

      // read value from memory
      ram.addr0 = load_addr_aligned.out;

      // write value into register file
      rf.go = 1'b1;
      rf.reg_idx = decoder.rd;
      rf.write_val = ram.read_data;
      rf.write_en = 1'b1;

      compute_load[done] = rf.done;
    }

    group compute_jump {
      // PC += imm
      pc_jump.in = jtype_immediate.out;
      pc_jump.write_en = 1'b1;

      j_retval_incr.left = pc.out;
      j_retval_incr.right = 32'd1;

      // rd = curr_PC+1
      rf.go = 1'b1;
      rf.reg_idx = decoder.rd;
      rf.write_val = j_retval_incr.out;
      rf.write_en = 1'b1;

      compute_jump[done] = pc_jump.done & rf.done ? 1'b1;
    }

    // increment the pc
    group incr_pc {
      pc_incr.left = pc.out;
      pc_incr.right = pc_jump.out;
      pc.in = pc_incr.out;
      pc.write_en = 1'b1;

      inst_count_incr.left = inst_count.out;
      inst_count_incr.right = 32'd1;
      inst_count.in = inst_count_incr.out;
      inst_count.write_en = 1'b1;

      incr_pc[done] = pc.done & inst_count.done ? 1'b1;
    }

    group worf_incr {
      worf_add.left = worf_idx.out;
      worf_add.right = 5'b1;
      worf_idx.in = worf_add.out;
      worf_idx.write_en = 1'b1;

      worf_done.in = worf_idx.out == 5'd15 ? 1'd1;
      worf_done.write_en = worf_idx.out == 5'd15 ? 1'd1;

      worf_incr[done] = worf_idx.done;
    }

    group worf_read_rf {
      rf.reg_idx = worf_idx.out;
      rf.go = 1'b1;
      worf_tmp.in = rf.reg_val;
      worf_tmp.write_en = 1'b1;
      worf_read_rf[done] = worf_tmp.done;
    }

    group worf_write_ram {
      reg_file.addr0 = worf_idx.out;
      reg_file.write_data = worf_tmp.out;
      reg_file.write_en = 1'b1;
      worf_write_ram[done] = reg_file.done;
    }
  }

  control {
    seq {
      while pc_good.out {
        read_instr;
        if r_type.out with is_r_type {
          seq {
            read_rs1;
            read_rs2;
            compute_r_type;
          }
        } else {
          if i_type.out with is_i_type {
            seq {
              read_rs1;
              compute_i_type;
            }
          } else {
            if b_type.out with is_b_type {
              seq {
                read_rs1;
                read_rs2;
                compute_b_type;
              }
            } else {
              if load_type.out with is_load {
                seq {
                  read_rs1;
                  compute_load;
                }
              } else {
                if j_type.out with is_j_type {
                  compute_jump;
                }
              }
            }
          }
        }
        incr_pc;
      }

      // debug (copy reg file into ram)
      while worf_not_done.out {
        seq {
          worf_read_rf;
          worf_write_ram;
          worf_incr;
        }
      }
    }
  }
}
